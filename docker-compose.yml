version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:16-alpine
    container_name: ${PROJECT_NAME}-db
    restart: unless-stopped
    volumes:
      - ./data/db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend

  # Nginx как обратный прокси
  nginx:
    image: nginx:alpine
    container_name: ${PROJECT_NAME}-nginx
    restart: unless-stopped
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - frontend
      - backend

  # API на FastAPI
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}-api
    restart: unless-stopped
    volumes:
      - ./services/api:/app
      - ./config/wireguard:/etc/wireguard
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    depends_on:
      - db
    networks:
      - backend

  # WireGuard VPN
  wireguard:
    image: linuxserver/wireguard
    container_name: ${PROJECT_NAME}-wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - ./config/wireguard:/config
    ports:
      - "${WG_PORT}:${WG_PORT}/udp"
    restart: unless-stopped
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      - vpn

  # Shadowsocks для маскировки
  shadowsocks:
    image: shadowsocks/shadowsocks-libev
    container_name: ${PROJECT_NAME}-shadowsocks
    restart: unless-stopped
    volumes:
      - ./config/shadowsocks:/etc/shadowsocks-libev
    ports:
      - "${SS_PORT}:${SS_PORT}/tcp"
      - "${SS_PORT}:${SS_PORT}/udp"
    networks:
      - vpn

  # Xray для дополнительной маскировки
  xray:
    image: teddysun/xray
    container_name: ${PROJECT_NAME}-xray
    restart: unless-stopped
    volumes:
      - ./config/xray:/etc/xray
      - ./ssl:/etc/ssl/xray
    ports:
      - "${XRAY_PORT}:${XRAY_PORT}/tcp"
      - "${XRAY_PORT}:${XRAY_PORT}/udp"
    networks:
      - vpn

  # Prometheus для сбора метрик
  prometheus:
    image: prom/prometheus
    container_name: ${PROJECT_NAME}-prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "127.0.0.1:${PROMETHEUS_PORT}:9090"
    networks:
      - monitoring

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana
    container_name: ${PROJECT_NAME}-grafana
    restart: unless-stopped
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana
    ports:
      - "127.0.0.1:${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring
      - backend

  # Node Exporter для сбора метрик с хоста
  node-exporter:
    image: prom/node-exporter
    container_name: ${PROJECT_NAME}-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - monitoring

  # Cadvisor для сбора метрик с контейнеров
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: ${PROJECT_NAME}-cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring

networks:
  frontend:
  backend:
  vpn:
    driver: bridge
  monitoring:

  # Alertmanager для отправки уведомлений
  alertmanager:
    image: prom/alertmanager
    container_name: ${PROJECT_NAME}-alertmanager
    restart: unless-stopped
    volumes:
      - ./config/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "127.0.0.1:9093:9093"
    networks:
      - monitoring
