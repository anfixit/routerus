version: "3.8"

# Веб-интерфейс (Москва - 109.73.194.190)
# Управление, мониторинг, дашборды

services:
  # Nginx Reverse Proxy + SSL
  nginx:
    build: ./infrastructure/nginx
    container_name: routerus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/web.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/ssl/certs:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - grafana
    networks:
      - web-network

  # FastAPI Backend (управление VPN серверами)
  backend:
    build: ./backend
    container_name: routerus-backend
    restart: unless-stopped
    environment:
      - MODE=WEB_INTERFACE
      - DATABASE_URL=sqlite:///./data/routerus.db
      - REDIS_URL=redis://redis:6379/0
      - VPN_SERVERS=${VPN_SERVERS}
      - VPN_API_SECRET=${VPN_API_SECRET}
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    depends_on:
      - redis
    networks:
      - web-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build: ./frontend
    container_name: routerus-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=https://${WEB_DOMAIN}/api
      - REACT_APP_GRAFANA_URL=https://${WEB_DOMAIN}/grafana
    networks:
      - web-network

  # Redis (для сессий и кеша)
  redis:
    image: redis:7-alpine
    container_name: routerus-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - web-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Prometheus (сбор метрик со всех VPN серверов)
  prometheus:
    build: ./infrastructure/monitoring/prometheus
    container_name: routerus-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./infrastructure/monitoring/prometheus/prometheus.web.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=90d"
      - "--web.enable-lifecycle"
      - "--web.external-url=https://${WEB_DOMAIN}/prometheus/"
    networks:
      - web-network

  # Grafana (дашборды и алерты)
  grafana:
    build: ./infrastructure/monitoring/grafana
    container_name: routerus-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${WEB_DOMAIN}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - web-network

  # Telegram Bot (управление и алерты)
  telegram-bot:
    build: ./telegram-bot
    container_name: routerus-telegram
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ADMIN_CHAT_ID=${ADMIN_CHAT_ID}
      - API_URL=http://backend:8000
      - MODE=WEB_INTERFACE
      - GRAFANA_URL=https://${WEB_DOMAIN}/grafana
    volumes:
      - bot-logs:/app/logs
    depends_on:
      - backend
    networks:
      - web-network

  # PostgreSQL (для продакшена, опционально)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: routerus-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - web-network

volumes:
  backend-data:
  backend-logs:
  redis-data:
  prometheus-data:
  grafana-data:
  nginx-logs:
  bot-logs:
  # postgres-data:

networks:
  web-network:
    driver: bridge
