from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.security import HTTPBearer
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import uvicorn
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
from .core.config import get_settings
from .core.database import create_tables, engine
from .core.security import get_password_hash
from .models.user import AdminUser
from .models.server import Server
from .api import auth, servers, users, monitoring

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

settings = get_settings()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {settings.app_name} v{settings.app_version}")
    logger.info(f"üìã –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {settings.mode}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î
    create_tables()

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    Path("data").mkdir(exist_ok=True)
    Path("logs").mkdir(exist_ok=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await create_default_admin()

    if settings.is_vpn_only:
        logger.info("üîí VPN —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    yield

    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")


async def create_default_admin():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        from sqlalchemy.orm import Session
        from .core.database import SessionLocal

        db = SessionLocal()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        admin = db.query(AdminUser).filter(AdminUser.username == "admin").first()

        if not admin:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin = AdminUser(
                username="admin",
                email="admin@routerus.local",
                hashed_password=get_password_hash(settings.admin_password),
                full_name="System Administrator",
                is_active=True,
                is_superuser=True
            )

            db.add(admin)
            db.commit()

            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (admin)")

        db.close()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Å VLESS+Reality",
    docs_url="/api/docs" if settings.debug else None,
    redoc_url="/api/redoc" if settings.debug else None,
    lifespan=lifespan
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins_list,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"] if settings.debug else ["localhost", "127.0.0.1"]
)

# Security
security = HTTPBearer()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(auth.router, prefix="/api/auth", tags=["–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
app.include_router(servers.router, prefix="/api/servers", tags=["–°–µ—Ä–≤–µ—Ä—ã"])
app.include_router(users.router, prefix="/api/users", tags=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"])
app.include_router(monitoring.router, prefix="/api/monitoring", tags=["–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"])


# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": f"üöÄ {settings.app_name} v{settings.app_version}",
        "mode": settings.mode,
        "status": "running",
        "docs": "/api/docs" if settings.debug else "disabled"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        from sqlalchemy import text
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))

        return {
            "status": "healthy",
            "version": settings.app_version,
            "mode": settings.mode,
            "database": "connected",
            "timestamp": "2024-01-01T00:00:00Z"
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Service unhealthy"
        )


@app.get("/api/info")
async def api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API"""
    from .models.server import Server
    from .models.user import VpnUser
    from .core.database import SessionLocal

    try:
        db = SessionLocal()

        servers_count = db.query(Server).count()
        users_count = db.query(VpnUser).count()
        active_users = db.query(VpnUser).filter(VpnUser.is_active == True).count()

        db.close()

        return {
            "app_name": settings.app_name,
            "version": settings.app_version,
            "mode": settings.mode,
            "statistics": {
                "servers_count": servers_count,
                "users_count": users_count,
                "active_users": active_users
            },
            "features": {
                "vpn_server": settings.is_vpn_only,
                "web_interface": settings.is_web_interface,
                "monitoring": True,
                "telegram_bot": bool(settings.telegram_bot_token)
            }
        }
    except Exception as e:
        logger.error(f"API info error: {e}")
        return {"error": "Unable to fetch info"}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={"detail": "Endpoint not found"}
    )


@app.exception_handler(500)
async def internal_error_handler(request, exc):
    logger.error(f"Internal server error: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"}
    )


# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower(),
        access_log=settings.debug
    )
