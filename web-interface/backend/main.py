#!/usr/bin/env python3
"""
Routerus V2 - FastAPI Backend
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ REST API
"""

from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, StreamingResponse
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import httpx
import qrcode
import io
import base64
import json
import os
import uuid
import asyncio
import psutil
from datetime import datetime, timedelta
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Routerus V2 API",
    description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Å VLESS+Reality",
    version="2.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc"
)

# CORS –¥–ª—è React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ø—Ä–æ—Å—Ç–∞—è –¥–ª—è –Ω–∞—á–∞–ª–∞)
security = HTTPBearer()

# =============================================================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# =============================================================================

class ServerCreate(BaseModel):
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")
    ip: str = Field(..., description="IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞")
    location: str = Field(..., description="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
    description: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ")

class ServerResponse(BaseModel):
    id: str
    name: str
    ip: str
    location: str
    status: str  # online, offline, unknown
    users_count: int
    created_at: datetime
    last_check: Optional[datetime]

class UserCreate(BaseModel):
    email: str = Field(..., description="Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    name: Optional[str] = Field(None, description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    server_id: str = Field(..., description="ID —Å–µ—Ä–≤–µ—Ä–∞")

class UserResponse(BaseModel):
    id: str
    email: str
    name: Optional[str]
    server_id: str
    config_url: str
    created_at: datetime
    last_connection: Optional[datetime]

class ServerStats(BaseModel):
    cpu_usage: float
    memory_usage: float
    disk_usage: float
    network_in: int
    network_out: int
    connections: int
    uptime: int

class DeployCommand(BaseModel):
    command: str
    server_ip: str
    instructions: List[str]

# =============================================================================
# –í–†–ï–ú–ï–ù–ù–û–ï –•–†–ê–ù–ò–õ–ò–©–ï (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
# =============================================================================

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
servers_db: Dict[str, Dict] = {}
users_db: Dict[str, Dict] = {}
stats_db: Dict[str, Dict] = {}

# =============================================================================
# –£–¢–ò–õ–ò–¢–´
# =============================================================================

def generate_vless_config(server_ip: str, user_id: str, email: str) -> Dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑ VPN —Å–µ—Ä–≤–µ—Ä–∞
    config = {
        "server_ip": server_ip,
        "server_port": 443,
        "user_id": user_id,
        "email": email,
        "protocol": "vless",
        "security": "reality",
        "sni": "www.microsoft.com",
        "flow": "xtls-rprx-vision"
    }
    return config

def generate_vless_url(config: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç VLESS URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    import urllib.parse

    base_url = f"vless://{config['user_id']}@{config['server_ip']}:{config['server_port']}"

    params = {
        "type": "tcp",
        "security": config['security'],
        "sni": config['sni'],
        "fp": "chrome",
        "flow": config['flow']
    }

    query_string = urllib.parse.urlencode(params)
    full_url = f"{base_url}?{query_string}#{urllib.parse.quote(config['email'])}"

    return full_url

def generate_qr_code(text: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR –∫–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç base64 —Å—Ç—Ä–æ–∫—É"""
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(text)
    qr.make(fit=True)

    img = qr.make_image(fill_color="black", back_color="white")

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    buffer = io.BytesIO()
    img.save(buffer, format='PNG')
    img_str = base64.b64encode(buffer.getvalue()).decode()

    return f"data:image/png;base64,{img_str}"

async def check_server_status(server_ip: str) -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å VPN —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É 443
            response = await client.get(f"https://{server_ip}", verify=False)
            return "online"
    except:
        return "offline"

def get_system_stats() -> ServerStats:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    cpu = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent

    # –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    net_io = psutil.net_io_counters()

    return ServerStats(
        cpu_usage=cpu,
        memory_usage=memory,
        disk_usage=disk,
        network_in=net_io.bytes_recv,
        network_out=net_io.bytes_sent,
        connections=len(psutil.net_connections()),
        uptime=int(datetime.now().timestamp() - psutil.boot_time())
    )

# =============================================================================
# API –≠–ù–î–ü–û–ò–ù–¢–´
# =============================================================================

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ React"""
    return """
    <html>
        <head><title>Routerus V2</title></head>
        <body>
            <h1>üöÄ Routerus V2 API</h1>
            <p>Backend —Ä–∞–±–æ—Ç–∞–µ—Ç! –§—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ React.</p>
            <ul>
                <li><a href="/api/docs">üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></li>
                <li><a href="/api/stats">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</a></li>
                <li><a href="/api/servers">üñ•Ô∏è –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤</a></li>
            </ul>
        </body>
    </html>
    """

# –°–ï–†–í–ï–†–´
@app.get("/api/servers", response_model=List[ServerResponse])
async def get_servers():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö VPN —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = []
    for server_id, server_data in servers_db.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        status = await check_server_status(server_data["ip"])

        servers.append(ServerResponse(
            id=server_id,
            name=server_data["name"],
            ip=server_data["ip"],
            location=server_data["location"],
            status=status,
            users_count=len([u for u in users_db.values() if u["server_id"] == server_id]),
            created_at=server_data["created_at"],
            last_check=datetime.now()
        ))

    return servers

@app.post("/api/servers", response_model=ServerResponse)
async def create_server(server: ServerCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π VPN —Å–µ—Ä–≤–µ—Ä"""
    server_id = str(uuid.uuid4())

    server_data = {
        "id": server_id,
        "name": server.name,
        "ip": server.ip,
        "location": server.location,
        "description": server.description,
        "created_at": datetime.now()
    }

    servers_db[server_id] = server_data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = await check_server_status(server.ip)

    return ServerResponse(
        id=server_id,
        name=server.name,
        ip=server.ip,
        location=server.location,
        status=status,
        users_count=0,
        created_at=server_data["created_at"],
        last_check=datetime.now()
    )

@app.get("/api/servers/{server_id}/deploy")
async def get_deploy_command(server_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    if server_id not in servers_db:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    server = servers_db[server_id]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    deploy_command = f"curl -fsSL https://your-domain.ru/deploy/{server_id} | bash"

    return DeployCommand(
        command=deploy_command,
        server_ip=server["ip"],
        instructions=[
            f"1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É: ssh root@{server['ip']}",
            "2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:",
            f"   {deploy_command}",
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (2-3 –º–∏–Ω—É—Ç—ã)",
            "4. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ]
    )

# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
@app.get("/api/users", response_model=List[UserResponse])
async def get_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = []
    for user_id, user_data in users_db.items():
        users.append(UserResponse(
            id=user_id,
            email=user_data["email"],
            name=user_data["name"],
            server_id=user_data["server_id"],
            config_url=user_data["config_url"],
            created_at=user_data["created_at"],
            last_connection=user_data.get("last_connection")
        ))

    return users

@app.post("/api/users", response_model=UserResponse)
async def create_user(user: UserCreate):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VPN"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    if user.server_id not in servers_db:
        raise HTTPException(status_code=404, detail="–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    user_id = str(uuid.uuid4())
    server = servers_db[user.server_id]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = generate_vless_config(server["ip"], user_id, user.email)
    config_url = generate_vless_url(config)

    user_data = {
        "id": user_id,
        "email": user.email,
        "name": user.name,
        "server_id": user.server_id,
        "config_url": config_url,
        "created_at": datetime.now()
    }

    users_db[user_id] = user_data

    return UserResponse(
        id=user_id,
        email=user.email,
        name=user.name,
        server_id=user.server_id,
        config_url=config_url,
        created_at=user_data["created_at"],
        last_connection=None
    )

@app.get("/api/users/{user_id}/qr")
async def get_user_qr(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in users_db:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    user = users_db[user_id]
    qr_code = generate_qr_code(user["config_url"])

    return {"qr_code": qr_code, "config_url": user["config_url"]}

# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
@app.get("/api/stats", response_model=ServerStats)
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    return get_system_stats()

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "ok",
        "timestamp": datetime.now(),
        "version": "2.0.0",
        "servers_count": len(servers_db),
        "users_count": len(users_db)
    }

# WEBSOCKET –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
@app.websocket("/api/ws")
async def websocket_endpoint(websocket):
    """WebSocket –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    await websocket.accept()
    try:
        while True:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            stats = get_system_stats()
            await websocket.send_json({
                "type": "stats",
                "data": stats.dict()
            })
            await asyncio.sleep(5)
    except:
        logger.info("WebSocket connection closed")

# =============================================================================
# –ó–ê–ü–£–°–ö
# =============================================================================

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
