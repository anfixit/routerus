#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è Routerus V2
"""

import secrets
import string
import base64
import uuid
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import os

def generate_password(length=32):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def generate_jwt_secret():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç JWT —Å–µ–∫—Ä–µ—Ç"""
    return secrets.token_urlsafe(64)

def generate_api_secret():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç API —Å–µ–∫—Ä–µ—Ç"""
    return secrets.token_urlsafe(48)

def generate_reality_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É –∫–ª—é—á–µ–π –¥–ª—è Reality"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 32-–±–∞–π—Ç–Ω—ã–µ –∫–ª—é—á–∏
    private_key = secrets.token_bytes(32)
    public_key = secrets.token_bytes(32)

    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
    private_b64 = base64.b64encode(private_key).decode()
    public_b64 = base64.b64encode(public_key).decode()

    return private_b64, public_b64

def generate_short_ids(count=3):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ ID –¥–ª—è Reality"""
    return [secrets.token_hex(8) for _ in range(count)]

def generate_uuid():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID"""
    return str(uuid.uuid4())

def update_env_file(env_path=".env"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç .env —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏
    jwt_secret = generate_jwt_secret()
    api_secret = generate_api_secret()
    admin_password = generate_password(16)
    grafana_password = generate_password(16)
    reality_private, reality_public = generate_reality_keys()
    short_ids = generate_short_ids()

    print("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è Routerus V2...")
    print("=" * 50)

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
    env_content = {}
    if os.path.exists(env_path):
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_content[key.strip()] = value.strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –∫–ª—é—á–∏
    updates = {
        'JWT_SECRET': jwt_secret,
        'VPN_API_SECRET': api_secret,
        'ADMIN_PASSWORD': admin_password,
        'GRAFANA_PASSWORD': grafana_password,
        'REALITY_PRIVATE_KEY': reality_private,
        'REALITY_PUBLIC_KEY': reality_public,
        'REALITY_SHORT_IDS': ','.join(short_ids),
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    updated_keys = []
    for key, new_value in updates.items():
        current_value = env_content.get(key, '').strip('"\'')
        if not current_value or current_value in [
            'your-super-secret-jwt-key-change-this-in-production',
            'your-super-secret-api-key-for-vpn-communication',
            'your-strong-admin-password',
            'your-grafana-admin-password',
        ]:
            env_content[key] = new_value
            updated_keys.append(key)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
    with open(env_path, 'w', encoding='utf-8') as f:
        f.write("# ===================================================================\n")
        f.write("# Routerus V2 - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã\n")
        f.write("# ===================================================================\n\n")

        sections = {
            '–°–ï–†–í–ï–†–´': ['WEB_SERVER_IP', 'WEB_DOMAIN', 'VPN_SERVER_IP', 'VPN_DOMAIN', 'VPN_SERVERS'],
            '–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨': ['JWT_SECRET', 'VPN_API_SECRET', 'ADMIN_PASSWORD'],
            '–ë–ê–ó–ê –î–ê–ù–ù–´–•': ['DATABASE_URL'],
            '–ú–û–ù–ò–¢–û–†–ò–ù–ì': ['GRAFANA_PASSWORD', 'SMTP_HOST', 'SMTP_USER', 'SMTP_PASSWORD'],
            'TELEGRAM BOT': ['TELEGRAM_BOT_TOKEN', 'ADMIN_CHAT_ID'],
            'VPN –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø': ['VLESS_PORT', 'VLESS_FLOW', 'REALITY_DEST', 'REALITY_SERVER_NAME', 'REALITY_SNI', 'REALITY_PRIVATE_KEY', 'REALITY_PUBLIC_KEY', 'REALITY_SHORT_IDS'],
            'SSL –°–ï–†–¢–ò–§–ò–ö–ê–¢–´': ['LETSENCRYPT_EMAIL', 'SSL_DOMAINS'],
            '–õ–û–ì–ò–†–û–í–ê–ù–ò–ï': ['LOG_LEVEL', 'LOG_MAX_SIZE', 'LOG_BACKUP_COUNT'],
            '–†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï': ['BACKUP_PATH', 'BACKUP_SCHEDULE', 'BACKUP_RETENTION_DAYS'],
            '–†–ê–ó–†–ê–ë–û–¢–ö–ê': ['DEBUG', 'AUTO_RELOAD', 'CORS_ORIGINS'],
            '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò': ['TZ', 'MAX_CONNECTIONS_PER_USER', 'TOKEN_EXPIRE_SECONDS', 'DEFAULT_TRAFFIC_LIMIT', 'INACTIVE_USER_CLEANUP_DAYS']
        }

        for section, keys in sections.items():
            f.write(f"# {section}\n")
            f.write("# " + "=" * 50 + "\n")
            for key in keys:
                if key in env_content:
                    value = env_content[key]
                    f.write(f"{key}={value}\n")
            f.write("\n")

    print("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª")
    print("\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:")
    for key in updated_keys:
        if 'PASSWORD' in key or 'SECRET' in key or 'KEY' in key:
            print(f"  {key}: {'*' * 20} (—Å–∫—Ä—ã—Ç)")
        else:
            print(f"  {key}: {env_content[key]}")

    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ó–ê–ü–ò–°–ò:")
    print("=" * 50)
    print(f"üîê –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_password}")
    print(f"üìä –ü–∞—Ä–æ–ª—å Grafana: {grafana_password}")
    print(f"üîë Reality Public Key: {reality_public}")

    print("\nüìù –ß–¢–û –ù–£–ñ–ù–û –î–û–ü–û–õ–ù–ò–¢–¨ –í–†–£–ß–ù–£–Æ:")
    print("=" * 50)
    print("1. TELEGRAM_BOT_TOKEN - –ø–æ–ª—É—á–∏ —É @BotFather")
    print("2. ADMIN_CHAT_ID - –ø–æ–ª—É—á–∏ —É @userinfobot")
    print("3. LETSENCRYPT_EMAIL - —Ç–≤–æ–π email –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
    print("4. SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - –µ—Å–ª–∏ –Ω—É–∂–Ω—ã email –∞–ª–µ—Ä—Ç—ã")

    return env_content

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        from cryptography.hazmat.primitives import hashes
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ cryptography: pip install cryptography")
        exit(1)

    update_env_file()
