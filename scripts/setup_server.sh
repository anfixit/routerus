#!/bin/bash
# setup_server.sh: –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Routerus

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É Routerus VPN —Å–µ—Ä–≤–µ—Ä–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
   echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
   exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Å–ª—É—á–∞—è sudo)
REAL_USER=${SUDO_USER:-$(whoami)}
REAL_HOME=$(getent passwd "$REAL_USER" | cut -d: -f6)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_DIR="/opt/routerus"
VENV_DIR="$PROJECT_DIR/venv"
LOG_DIR="/var/log/routerus"

echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
apt update && apt upgrade -y
apt install -y python3.12 python3.12-venv python3-pip postgresql postgresql-contrib \
    nginx wireguard-tools git curl ufw build-essential libpq-dev

echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
mkdir -p "$PROJECT_DIR"
mkdir -p "$LOG_DIR"
chown -R "$REAL_USER:$REAL_USER" "$PROJECT_DIR"
chown -R "$REAL_USER:$REAL_USER" "$LOG_DIR"

echo "üêç –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
cd "$PROJECT_DIR"
sudo -u "$REAL_USER" python3.12 -m venv "$VENV_DIR"
sudo -u "$REAL_USER" "$VENV_DIR/bin/pip" install --upgrade pip poetry

echo "üóÉÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL..."
systemctl start postgresql
systemctl enable postgresql

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–î
if sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='wg_user'" | grep -q 1; then
    echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å wg_user —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    sudo -u postgres createuser --createdb wg_user
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw wg_manager_db; then
    echo "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö wg_manager_db —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
    sudo -u postgres createdb -O wg_user wg_manager_db
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ë–î
sudo -u postgres psql -c "ALTER USER wg_user PASSWORD 'zamiralovesme8becauseimthebest1';"

echo "üìã –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
cat > /etc/systemd/system/routerus.service << 'EOF'
[Unit]
Description=Routerus VPN Management System
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=exec
User=root
Group=root
WorkingDirectory=/opt/routerus
Environment=DJANGO_SETTINGS_MODULE=config.settings.production
EnvironmentFile=/opt/routerus/.env
ExecStartPre=/opt/routerus/venv/bin/python manage.py migrate
ExecStartPre=/opt/routerus/venv/bin/python manage.py collectstatic --noinput
ExecStart=/opt/routerus/venv/bin/gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

# Security settings
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/opt/routerus /var/log/routerus /var/lib/wireguard

[Install]
WantedBy=multi-user.target
EOF

echo "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
ufw --force enable
ufw allow ssh
ufw allow 8000/tcp
ufw allow 51820/udp  # WireGuard
ufw allow 8388/tcp   # Shadowsocks
ufw allow 443/tcp    # Xray
ufw allow 80/tcp     # HTTP
ufw reload

echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx reverse proxy..."
cat > /etc/nginx/sites-available/routerus << 'EOF'
server {
    listen 80;
    server_name _;

    location /static/ {
        alias /opt/routerus/staticfiles/;
        expires 30d;
    }

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}
EOF

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
ln -sf /etc/nginx/sites-available/routerus /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t && systemctl reload nginx
systemctl enable nginx

echo "üîê –í–∫–ª—é—á–µ–Ω–∏–µ IP forwarding –¥–ª—è VPN..."
echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
echo 'net.ipv6.conf.all.forwarding=1' >> /etc/sysctl.conf
sysctl -p

echo "‚ö° –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
systemctl daemon-reload
systemctl enable routerus

echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è..."
cat > "$PROJECT_DIR/quick_deploy.sh" << 'EOF'
#!/bin/bash
# –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –ø–æ—Å–ª–µ git pull
set -e
cd /opt/routerus
source venv/bin/activate
git pull origin main
poetry install --no-dev
python manage.py migrate
python manage.py collectstatic --noinput
sudo systemctl restart routerus
echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
EOF

chmod +x "$PROJECT_DIR/quick_deploy.sh"
chown "$REAL_USER:$REAL_USER" "$PROJECT_DIR/quick_deploy.sh"

echo ""
echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo "üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:"
echo "1. –°–∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç: cd /opt/routerus && git clone <your-repo> ."
echo "2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"
echo "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: source venv/bin/activate && poetry install --no-dev"
echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: sudo systemctl start routerus"
echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  sudo systemctl status routerus  - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
echo "  sudo systemctl restart routerus - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
echo "  sudo journalctl -u routerus -f  - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo "  ./quick_deploy.sh               - –±—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π"
echo ""
