#!/bin/bash
# Routerus V2 - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ú–æ—Å–∫–≤–∞)

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root –ø—Ä–∞–≤
if [[ $EUID -ne 0 ]]; then
    error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
fi

log "üåê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Routerus V2 –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"
log "======================================="

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me || echo "109.73.194.190")
log "IP —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
log "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
apt update -y
apt upgrade -y
apt install -y curl wget unzip git docker.io docker-compose-plugin nginx certbot python3-certbot-nginx ufw fail2ban htop nodejs npm

# –ó–∞–ø—É—Å–∫ Docker
systemctl enable docker
systemctl start docker
usermod -aG docker $USER || true

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
log "üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
ufw --force reset
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'
ufw allow 3000/tcp comment 'Grafana'
ufw allow 9090/tcp comment 'Prometheus'
ufw --force enable

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p /opt/routerus/{data,logs,ssl}
chown -R root:root /opt/routerus

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
if [ ! -f /opt/routerus/.env ]; then
    error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä."
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env –¥–ª—è –≤–µ–± —Ä–µ–∂–∏–º–∞
log "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
sed -i "s/MODE=VPN_ONLY/MODE=WEB_INTERFACE/" /opt/routerus/.env
sed -i "s/WEB_SERVER_IP=.*/WEB_SERVER_IP=$SERVER_IP/" /opt/routerus/.env
sed -i "s/DEBUG=true/DEBUG=false/" /opt/routerus/.env

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose V2
log "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
if ! command -v docker compose &> /dev/null; then
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose V2..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

# –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
log "üèóÔ∏è –°–±–æ—Ä–∫–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
cd /opt/routerus/frontend
npm install
npm run build

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
log "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
cat > /etc/nginx/sites-available/routerus << 'EOF'
server {
    listen 80;
    server_name _;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name _;

    # SSL Configuration (will be updated by certbot)
    ssl_certificate /etc/ssl/certs/routerus.crt;
    ssl_certificate_key /etc/ssl/private/routerus.key;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Frontend
    location / {
        root /opt/routerus/frontend/dist;
        try_files $uri $uri/ /index.html;

        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Backend API
    location /api/ {
        proxy_pass http://127.0.0.1:8000/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Grafana
    location /grafana/ {
        proxy_pass http://127.0.0.1:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Prometheus
    location /prometheus/ {
        proxy_pass http://127.0.0.1:9090/prometheus/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
log "üîê –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/ssl/private/routerus.key \
    -out /etc/ssl/certs/routerus.crt \
    -subj "/C=RU/ST=Moscow/L=Moscow/O=Routerus/CN=routerus.ru"

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∞–π—Ç–∞
ln -sf /etc/nginx/sites-available/routerus /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx
nginx -t

# –ó–∞–ø—É—Å–∫ Nginx
systemctl enable nginx
systemctl restart nginx

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "üèóÔ∏è –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
cd /opt/routerus
docker compose build --no-cache

log "üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
docker compose up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API..."
if curl -f http://localhost:8000/health &>/dev/null; then
    log "‚úÖ Backend API –¥–æ—Å—Ç—É–ø–µ–Ω"
else
    warn "‚ö†Ô∏è Backend API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx
if curl -f http://localhost/ &>/dev/null; then
    log "‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    warn "‚ö†Ô∏è Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
log "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞..."
cat > /etc/systemd/system/routerus-web.service << 'EOF'
[Unit]
Description=Routerus Web Interface
Requires=docker.service nginx.service
After=docker.service nginx.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=/opt/routerus
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

systemctl enable routerus-web
systemctl daemon-reload

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
log "üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
cat > /usr/local/bin/routerus-web << 'EOF'
#!/bin/bash
cd /opt/routerus

case "$1" in
    start)
        echo "–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
        docker compose up -d
        systemctl start nginx
        ;;
    stop)
        echo "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
        docker compose down
        systemctl stop nginx
        ;;
    restart)
        echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
        docker compose restart
        systemctl restart nginx
        ;;
    status)
        echo "=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
        docker compose ps
        echo ""
        echo "=== –°—Ç–∞—Ç—É—Å Nginx ==="
        systemctl status nginx --no-pager -l
        echo ""
        echo "=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ==="
        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}"
        ;;
    logs)
        docker compose logs -f
        ;;
    nginx-logs)
        tail -f /var/log/nginx/access.log /var/log/nginx/error.log
        ;;
    ssl)
        echo "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
        certbot --nginx -d routerus.ru -d www.routerus.ru --non-interactive --agree-tos -m admin@routerus.ru
        ;;
    update)
        echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
        cd frontend && npm run build && cd ..
        docker compose pull
        docker compose up -d
        systemctl reload nginx
        ;;
    *)
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|nginx-logs|ssl|update}"
        exit 1
        ;;
esac
EOF

chmod +x /usr/local/bin/routerus-web

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
log "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo ""
echo -e "${BLUE}üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:${NC}"
echo "IP –∞–¥—Ä–µ—Å: $SERVER_IP"
echo "HTTP: http://$SERVER_IP"
echo "HTTPS: https://$SERVER_IP"
echo "Grafana: https://$SERVER_IP/grafana"
echo "Prometheus: https://$SERVER_IP/prometheus"
echo ""
echo -e "${BLUE}üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
echo "routerus-web start       - –∑–∞–ø—É—Å–∫"
echo "routerus-web stop        - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
echo "routerus-web restart     - –ø–µ—Äez–∞–ø—É—Å–∫"
echo "routerus-web status      - —Å—Ç–∞—Ç—É—Å"
echo "routerus-web logs        - –ª–æ–≥–∏"
echo "routerus-web ssl         - –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS: A-–∑–∞–ø–∏—Å—å routerus.ru -> $SERVER_IP"
echo "2. –ü–æ–ª—É—á–∏—Ç–µ SSL: routerus-web ssl"
echo "3. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ VPN —Å–µ—Ä–≤–µ—Ä –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
echo ""
echo -e "${GREEN}‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
routerus-web status
